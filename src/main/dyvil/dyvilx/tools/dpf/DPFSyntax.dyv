package dyvilx.tools.dpf

import dyvilx.tools.dpf.ast._
import dyvilx.tools.dpf.ast.builder._
import dyvilx.tools.dpf.ast.value._

public class DPFSyntax {
	/**
	 * Root Node
	 *
	 * dpf { ... }
	 */
	static func dpf(configure: Configure<RootNode>) -> RootNode = new RootNode().use(configure)

	/**
	 * Node creation
	 *
	 * "name" { ... }
	 */
	final extension func apply(this: Name, configure: Configure<Node>) -> Node = new Node(this).use(configure)

	/**
	 * Nested Node creation
	 *
	 * "parent" {
	 *     "child" { ... }
	 * }
	 */
	final extension func applyStatement(this: Node, node: Node) -> void = this.add(node)

	/**
	 * Property creation with Colon
	 *
	 * "name": value
	 */
	final extension func applyStatement(this: Node, pair: (Name, Value)) -> void = this.add(new Property(pair._1, pair._2))

	/**
	 * Builder creation
	 *
	 * "Name"("value", "label": "value")
	 */
	final extension func apply(this: Name, parameters: (Value | (Name, Value))...) -> Builder {
		let builder = new Builder(this)

		for element <- parameters {
			element match {
				case let v: Value => builder.add(Parameter(v))
				case (let n: Name, let v: Value) => builder.add(Parameter(n, v))
			}
		}

		return builder
	}

	/**
	 * Builder with node
	 *
	 * "Name"("value", "label": "value") { ... }
	 */
	final extension func apply(this: Name, parameters: (Value | (Name, Value))..., node configure: Configure<Node>) -> Builder {
		let builder = this(parameters...)
		configure(builder.visitNode())
		return builder
	}
}
