package dyvilx.tools.dpf.ast.value

using dyvilx.tools.dpf.model.Expandable._
import dyvilx.tools.dpf.converter.DPFValueVisitor
import dyvilx.tools.dpf.visitor.{ ListVisitor, ValueVisitor }
import dyvilx.tools.parsing.ASTNode

import java.util.{ List, ArrayList, Map }
import java.util.function.UnaryOperator

@LiteralConvertible.FromArray
case class ListValue(protected let elements: List<Value> { public get })
	implements Value, ListVisitor, Expandable
{
	static final func apply(elements: Value...) -> ListValue = ListValue(ArrayList(elements...))

	// Visitor

	override func visitElement() -> ValueVisitor = new DPFValueVisitor {
		override func visitValue(value: Value) -> void = this<ListValue>.elements.add(value)
	}

	override func accept(visitor: ValueVisitor)
	{
		let listVisitor = visitor.visitList()

		for (element <- this.elements)
		{
			element.accept(listVisitor.visitElement())
		}

		listVisitor.visitEnd()
	}

	// Expandable

	override func expand(mappings: Map<String, Object>, mutate: boolean) -> ListValue
	{
		let expanded = this.elements.expand(mappings, mutate) as List<Value>
		return expanded === this.elements ? this : new ListValue(expanded)
	}

	// String

	override func toString() -> String = format(this)

	override func toString(indent: String, buffer: StringBuilder) -> void
	{
		let len = this.elements.size
		if (len <= 0)
		{
			buffer.append('[]')
			return
		}

		buffer.append('[ ')
		this.elements[0].toString(indent, buffer)
		for (i <- 1 ..< len)
		{
			buffer.append(', ')
			this.elements[i].toString(indent, buffer)
		}
		buffer.append(' ]')
	}
}
