package dyvilx.tools.dpf.model

import java.util.{ List, Map, LinkedHashMap }
import java.util.stream.Collectors

interface Expandable {
	func expand(mappings: Map<String, Object>) -> Object = this.expand(mappings, true)

	func expanded(mappings: Map<String, Object>) -> Object = this.expand(mappings, false)

	func expand(mappings: Map<String, Object>, mutate: boolean) -> Object

	static func expand(obj: Object, mappings: Map<String, Object>, mutate: boolean) -> Object {
		obj match {
			case var exp: Expandable => exp.expand(mappings, mutate)
			case var lst: List<_>    => lst.expand(mappings, mutate)
			case var map: Map<_, _>  => map.expand(mappings, mutate)
			case _ => obj
		}
	}
}

@JavaName("ExpandableObjects")
extension Object {
	final func expand(mappings: Map<String, Object>) -> Object {
		return this.expand(mappings, true)
	}

	final func expanded(mappings: Map<String, Object>) -> Object {
		return this.expand(mappings, false)
	}

	func expand(mappings: Map<String, Object>, mutate: boolean) -> Object {
		// implementation resides in Expandable.expand because of a bug with
		// extension method overload resolution
		return Expandable.expand(this, mappings, mutate)
	}
}

@JavaName("ExpandableMaps")
extension Map<_, _> {
	final func expand(mappings: Map<String, Object>) -> Map<_, _> {
		try {
			let copy = new LinkedHashMap(this)
			this.clear()

			for entry <- copy.entrySet() {
				let key = entry.getKey().expand(mappings)
				let value = entry.getValue().expand(mappings)
				this.put(key, value)
			}

			return this
		}
		catch ex: UnsupportedOperationException {
			return this.expanded(mappings)
		}
	}

	final func expanded(mappings: Map<String, Object>) -> Map<_, _> {
		let result = new LinkedHashMap<Object, Object>(this.size())

		for entry <- this.entrySet() {
			let key = entry.getKey().expanded(mappings)
			let value = entry.getValue().expanded(mappings)
			result.put(key, value)
		}

		return result
	}

	final func expand(mappings: Map<String, Object>, mutate: boolean) -> Map<_, _> {
		return mutate ? this.expand(mappings) : this.expanded(mappings)
	}
}

@JavaName("ExpandableLists")
extension List<_> {
	final func expand(mappings: Map<String, Object>) -> List<_> {
		try {
			this.replaceAll(_.expand(mappings))
			return this
		}
		catch ex: UnsupportedOperationException {
			return this.expanded(mappings)
		}
	}

	final func expanded(mappings: Map<String, Object>) -> List<_> {
		return this.stream.map(_.expanded(mappings)).collect(Collectors.toList<Object>())
	}

	final func expand(mappings: Map<String, Object>, mutate: boolean) -> List<_> {
		return mutate ? this.expand(mappings) : this.expanded(mappings)
	}
}
