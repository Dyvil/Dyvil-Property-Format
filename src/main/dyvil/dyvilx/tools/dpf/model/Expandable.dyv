package dyvilx.tools.dpf.model

interface Expandable {
	func expand(mappings: Map<String, Object>, mutate: boolean) -> Object

	static func expand(obj: Object, mappings: Map<String, Object>, mutate: boolean) -> Object
		= obj.expand(mappings, mutate)
}

extension Object {
	func expand(mappings: Map<String, Object>, mutate: boolean) -> Object {
		this match {
			case var exp: Expandable    => exp.expand(mappings, mutate)
			case var col: Collection<_> => col.expand(mappings, mutate)
			case var map: Map<_, _>     => map.expand(mappings, mutate)
			case _ => this
		}
	}
}

extension Map<_, _> {
	final func expand(mappings: Map<String, Object>, mutate: boolean) -> Map<_, _> {
		if !mutate || this.isImmutable() {
			return this.entryMapped((k, v) => (k.expand(mappings, mutate), v.expand(mappings, mutate)))
		}
		this.mapEntries((k, v) => (k.expand(mappings, true), v.expand(mappings, true)))
		return this
	}
}

extension Collection<_> {
	final func expand(mappings: Map<String, Object>, mutate: boolean) -> Collection<_> {
		if !mutate || this.isImmutable() {
			return this.mapped(_.expand(mappings, mutate))
		}
		this.map(_.expand(mappings, true))
		return this
	}
}
